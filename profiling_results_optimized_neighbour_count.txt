Timer unit: 1e-07 s

Total time: 0.0217741 s
File: d:\Documents\Projects\Python\wayoflife\conwaygolgrid.py
Function: __perform_update at line 86

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    86                                               @staticmethod
    87                                               # @njit(fastmath=True, cache=True)
    88                                               def __perform_update(cells: np.ndarray, neighbour_count: np.ndarray,
    89                                                                    new_cells: set[tuple[int, int]], survivor_cells: set[tuple[int, int]],
    90                                                                    dead_cells: set[tuple[int, int]], rows: int, columns: int,
    91                                                                    new_color: tuple[int, int, int], survivor_color: tuple[int, int, int],
    92                                                                    dead_color: tuple[int, int, int], background_color: tuple[int, int, int]
    93                                                                    ) -> tuple[np.ndarray, list[tuple[int, int, tuple[int, int, int]]]]:
    94                                                   """Updates the grid to the next step in the iteration, following Conway's Game of Life
    95                                                   rules. Evaluates each cell, and returns the list of cells to be redrawn and their colors
    96                                                   """
    97                                                   # Grab the coordinates of the non-background cells
    98         1       1234.0   1234.0      0.6          active_cells = sorted(new_cells.union(survivor_cells).union(dead_cells))
    99                                           
   100                                                   # Per active cell, grab the coordinates from surrounding cells, add them to a set
   101                                                   # to be able to evaluate each cell once.
   102         1          7.0      7.0      0.0          cells_to_evaluate = set()
   103       338       1294.0      3.8      0.6          for row, col in active_cells:
   104       999       6408.0      6.4      2.9              for i in range(max(0, row-1), min(row+2, rows)):
   105      2970      18583.0      6.3      8.5                  for j in range(max(0, col-1), min(col+2, columns)):
   106      2970      19754.0      6.7      9.1                      cells_to_evaluate.add((i, j))
   107                                           
   108         1       3150.0   3150.0      1.4          updated_cells = np.array([[False] * cells.shape[1]] * cells.shape[0])
   109         1          6.0      6.0      0.0          neighbour_count_to_update: list[tuple[tuple[int, int], int]] = []
   110         1          3.0      3.0      0.0          cells_to_redraw: list[tuple[int, int, tuple[int, int, int]]] = []
   111      2314      11529.0      5.0      5.3          for row, col in cells_to_evaluate:
   112      2314       9507.0      4.1      4.4              cell = (row, col)
   113                                                       # Count the alive cells around the current cell
   114      2314      14168.0      6.1      6.5              alive_neighbours = neighbour_count[row, col]
   115      1977       9513.0      4.8      4.4              if cells[cell]:
   116       303       1626.0      5.4      0.7                  if alive_neighbours in (2, 3):
   117        34        208.0      6.1      0.1                      updated_cells[cell] = True
   118        34        222.0      6.5      0.1                      cells_to_redraw.append((row, col, survivor_color))
   119        34        195.0      5.7      0.1                      survivor_cells.add(cell)
   120        34        184.0      5.4      0.1                      new_cells.discard(cell)
   121        34        172.0      5.1      0.1                      dead_cells.discard(cell)
   122                                                           else:
   123       303       8547.0     28.2      3.9                      cells_to_redraw.append((row, col, dead_color))
   124       303       1799.0      5.9      0.8                      neighbour_count_to_update.append((cell, -1))
   125       303       1603.0      5.3      0.7                      dead_cells.add(cell)
   126       303       1671.0      5.5      0.8                      new_cells.discard(cell)
   127       303       1582.0      5.2      0.7                      survivor_cells.discard(cell)
   128                                                       else:
   129      1922       8059.0      4.2      3.7                  if alive_neighbours == 3:
   130        55        353.0      6.4      0.2                      updated_cells[cell] = True
   131        55        423.0      7.7      0.2                      cells_to_redraw.append((row, col, new_color))
   132        55        281.0      5.1      0.1                      neighbour_count_to_update.append((cell, 1))
   133        55        296.0      5.4      0.1                      new_cells.add(cell)
   134        55        265.0      4.8      0.1                      survivor_cells.discard(cell)
   135        55        284.0      5.2      0.1                      dead_cells.discard(cell)
   136                                                           else:
   137      1922      13495.0      7.0      6.2                      cells_to_redraw.append((row, col, background_color))
   138      1922      10818.0      5.6      5.0                      dead_cells.discard(cell)
   139                                           
   140       358       1931.0      5.4      0.9          for coordinates, delta in neighbour_count_to_update:
   141       358       1294.0      3.6      0.6              row, col = coordinates
   142      1062       6882.0      6.5      3.2              for i in range(max(0, row-1), min(row+2, rows)):
   143      3159      20742.0      6.6      9.5                  for j in range(max(0, col-1), min(col+2, columns)):
   144      2801      13275.0      4.7      6.1                      if (i, j) != coordinates:
   145      2801      26369.0      9.4     12.1                          neighbour_count[(i, j)] += delta
   146                                           
   147         1          9.0      9.0      0.0          return updated_cells, cells_to_redraw

